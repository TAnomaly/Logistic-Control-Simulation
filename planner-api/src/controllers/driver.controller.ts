import { Controller, Post, Get, Put, Param, Body, UseGuards, HttpException, HttpStatus } from '@nestjs/common';
import { DriverService } from '../application/services/driver.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';

interface CreateDriverRequest {
    name: string;
    phoneNumber: string;
    vehicleType: string;
    licensePlate?: string;
    address?: string;
    currentLocation?: {
        latitude: number;
        longitude: number;
    };
}

interface AssignShipmentRequest {
    shipmentId: string;
    assignedAt?: string;
    notes?: string;
}

@Controller('drivers')
@UseGuards(JwtAuthGuard)
export class DriverController {
    constructor(private readonly driverService: DriverService) { }

    /**
     * Yeni s√ºr√ºc√º olu≈ütur
     */
    @Post()
    async createDriver(@Body() request: CreateDriverRequest) {
        try {
            console.log(`üöó Yeni s√ºr√ºc√º olu≈üturuluyor: ${request.name}`);

            const driver = await this.driverService.createDriver({
                name: request.name,
                phoneNumber: request.phoneNumber,
                vehicleType: request.vehicleType,
                licensePlate: request.licensePlate,
                address: request.address,
                currentLocation: request.currentLocation
            });

            console.log(`‚úÖ S√ºr√ºc√º ba≈üarƒ±yla olu≈üturuldu: ${driver.id}`);

            return {
                success: true,
                message: 'S√ºr√ºc√º ba≈üarƒ±yla olu≈üturuldu',
                data: driver
            };
        } catch (error) {
            console.error(`‚ùå S√ºr√ºc√º olu≈üturma hatasƒ±:`, error.message);
            throw new HttpException(
                `S√ºr√ºc√º olu≈üturulamadƒ±: ${error.message}`,
                HttpStatus.BAD_REQUEST
            );
        }
    }

    /**
     * T√ºm s√ºr√ºc√ºleri listele
     */
    @Get()
    async getAllDrivers() {
        try {
            console.log(`üìã T√ºm s√ºr√ºc√ºler listeleniyor`);

            const drivers = await this.driverService.getAllDrivers();

            return {
                success: true,
                data: {
                    totalDrivers: drivers.length,
                    drivers: drivers
                }
            };
        } catch (error) {
            console.error(`‚ùå S√ºr√ºc√º listeleme hatasƒ±:`, error.message);
            throw new HttpException(
                `S√ºr√ºc√ºler listelenemedi: ${error.message}`,
                HttpStatus.BAD_REQUEST
            );
        }
    }

    /**
     * S√ºr√ºc√º bilgilerini getir
     */
    @Get(':id')
    async getDriverById(@Param('id') id: string) {
        try {
            console.log(`üìã S√ºr√ºc√º bilgileri getiriliyor: ${id}`);

            const driver = await this.driverService.getDriverById(id);

            if (!driver) {
                throw new HttpException(
                    `S√ºr√ºc√º bulunamadƒ±: ${id}`,
                    HttpStatus.NOT_FOUND
                );
            }

            return {
                success: true,
                data: driver
            };
        } catch (error) {
            console.error(`‚ùå S√ºr√ºc√º getirme hatasƒ±:`, error.message);
            throw new HttpException(
                `S√ºr√ºc√º getirilemedi: ${error.message}`,
                HttpStatus.BAD_REQUEST
            );
        }
    }

    /**
     * S√ºr√ºc√ºye sipari≈ü ata
     */
    @Post(':id/assignments')
    async assignShipment(
        @Param('id') driverId: string,
        @Body() request: AssignShipmentRequest
    ) {
        try {
            console.log(`üì¶ S√ºr√ºc√º ${driverId}'ye sipari≈ü atanƒ±yor: ${request.shipmentId}`);

            const assignment = await this.driverService.assignShipmentToDriver(
                driverId,
                request.shipmentId,
                {
                    assignedAt: request.assignedAt ? new Date(request.assignedAt) : new Date(),
                    notes: request.notes
                }
            );

            console.log(`‚úÖ Sipari≈ü ba≈üarƒ±yla atandƒ±: ${assignment.id}`);

            return {
                success: true,
                message: 'Sipari≈ü ba≈üarƒ±yla s√ºr√ºc√ºye atandƒ±',
                data: assignment
            };
        } catch (error) {
            console.error(`‚ùå Sipari≈ü atama hatasƒ±:`, error.message);
            throw new HttpException(
                `Sipari≈ü atanamadƒ±: ${error.message}`,
                HttpStatus.BAD_REQUEST
            );
        }
    }

    /**
     * S√ºr√ºc√ºn√ºn atamalarƒ±nƒ± getir
     */
    @Get(':id/assignments')
    async getDriverAssignments(@Param('id') driverId: string) {
        try {
            console.log(`üìã S√ºr√ºc√º atamalarƒ± getiriliyor: ${driverId}`);

            const assignments = await this.driverService.getDriverAssignments(driverId);

            return {
                success: true,
                data: {
                    driverId: driverId,
                    totalAssignments: assignments.length,
                    assignments: assignments
                }
            };
        } catch (error) {
            console.error(`‚ùå S√ºr√ºc√º atamalarƒ± getirme hatasƒ±:`, error.message);
            throw new HttpException(
                `S√ºr√ºc√º atamalarƒ± getirilemedi: ${error.message}`,
                HttpStatus.BAD_REQUEST
            );
        }
    }

    /**
     * S√ºr√ºc√º konumunu g√ºncelle
     */
    @Put(':id/location')
    async updateDriverLocation(
        @Param('id') driverId: string,
        @Body() location: { latitude: number; longitude: number }
    ) {
        try {
            console.log(`üìç S√ºr√ºc√º konumu g√ºncelleniyor: ${driverId}`);

            const updatedDriver = await this.driverService.updateDriverLocation(
                driverId,
                location.latitude,
                location.longitude
            );

            console.log(`‚úÖ S√ºr√ºc√º konumu g√ºncellendi: ${driverId}`);

            return {
                success: true,
                message: 'S√ºr√ºc√º konumu ba≈üarƒ±yla g√ºncellendi',
                data: {
                    driverId: updatedDriver.id,
                    currentLocation: updatedDriver.currentLocation,
                    lastActiveAt: updatedDriver.lastActiveAt
                }
            };
        } catch (error) {
            console.error(`‚ùå S√ºr√ºc√º konum g√ºncelleme hatasƒ±:`, error.message);
            throw new HttpException(
                `S√ºr√ºc√º konumu g√ºncellenemedi: ${error.message}`,
                HttpStatus.BAD_REQUEST
            );
        }
    }
} 