apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: logistic-system
data:
  NODE_ENV: "production"
  PORT: "3000"
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_USERNAME: "postgres"
  DB_PASSWORD: "password"
  DB_NAME: "logistic_control"
  DB_SYNC: "false"
  DB_LOGGING: "false"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logistic-control-api
  namespace: logistic-system
  labels:
    app: logistic-control-api
    component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: logistic-control-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: logistic-control-api
        component: backend
    spec:
      containers:
      - name: logistic-control-api
        image: logistic-control-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: PORT
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_PORT
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_PASSWORD
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_NAME
        - name: DB_SYNC
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_SYNC
        - name: DB_LOGGING
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_LOGGING
        livenessProbe:
          httpGet:
            path: /api/shipments/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/shipments/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: 512Mi
            cpu: 500m
          limits:
            memory: 1Gi
            cpu: 1000m
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL

---
apiVersion: v1
kind: Service
metadata:
  name: logistic-control-api-service
  namespace: logistic-system
  labels:
    app: logistic-control-api
    component: backend
spec:
  selector:
    app: logistic-control-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
      name: http
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: logistic-control-api-ingress
  namespace: logistic-system
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  ingressClassName: nginx
  rules:
  - host: logistic-api.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: logistic-control-api-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: logistic-control-api-hpa
  namespace: logistic-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: logistic-control-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80 