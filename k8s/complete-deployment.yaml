# Logistic Control System - Complete Kubernetes Deployment
# Bu dosya tüm microservice'leri Kubernetes'te deploy etmek için kullanılır

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: logistic-system
  labels:
    app: logistic-control-simulation
    environment: production
    version: v1.0.0

---
# ConfigMap for shared configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: logistic-config
  namespace: logistic-system
data:
  NODE_ENV: "production"
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_USERNAME: "postgres"
  DB_PASSWORD: "password"
  DB_NAME: "logistic_control"
  DB_SYNC: "false"
  DB_LOGGING: "false"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  RABBITMQ_HOST: "rabbitmq-service"
  RABBITMQ_PORT: "5672"
  RABBITMQ_USER: "guest"
  RABBITMQ_PASS: "guest"

---
# PostgreSQL Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: logistic-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: logistic-system
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: logistic_control
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
        resources:
          requests:
            memory: 256Mi
            cpu: 250m
          limits:
            memory: 512Mi
            cpu: 500m
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: logistic-system
  labels:
    app: postgres
    component: database
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
      name: postgres
  type: ClusterIP

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: logistic-system
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
        resources:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
            cpu: 200m

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: logistic-system
  labels:
    app: redis
    component: cache
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
      name: redis
  type: ClusterIP

---
# RabbitMQ Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: logistic-system
  labels:
    app: rabbitmq
    component: message-broker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
        component: message-broker
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management-alpine
        ports:
        - containerPort: 5672
          name: amqp
        - containerPort: 15672
          name: management
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: guest
        - name: RABBITMQ_DEFAULT_PASS
          value: guest
        livenessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - ping
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - rabbitmq-diagnostics
            - ping
          initialDelaySeconds: 5
          timeoutSeconds: 1
          periodSeconds: 5
        resources:
          requests:
            memory: 256Mi
            cpu: 200m
          limits:
            memory: 512Mi
            cpu: 400m

---
# RabbitMQ Service
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
  namespace: logistic-system
  labels:
    app: rabbitmq
    component: message-broker
spec:
  selector:
    app: rabbitmq
  ports:
    - protocol: TCP
      port: 5672
      targetPort: 5672
      name: amqp
    - protocol: TCP
      port: 15672
      targetPort: 15672
      name: management
  type: ClusterIP

---
# Driver API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: driver-api
  namespace: logistic-system
  labels:
    app: driver-api
    component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: driver-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: driver-api
        component: backend
    spec:
      containers:
      - name: driver-api
        image: logistic-driver-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: NODE_ENV
        - name: PORT
          value: "3001"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_PORT
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_PASSWORD
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_NAME
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: REDIS_PORT
        - name: RABBITMQ_HOST
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: RABBITMQ_HOST
        - name: RABBITMQ_PORT
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: RABBITMQ_PORT
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: 512Mi
            cpu: 500m
          limits:
            memory: 1Gi
            cpu: 1000m

---
# Driver API Service
apiVersion: v1
kind: Service
metadata:
  name: driver-api-service
  namespace: logistic-system
  labels:
    app: driver-api
    component: backend
spec:
  selector:
    app: driver-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3001
      name: http
  type: ClusterIP

---
# Planner API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: planner-api
  namespace: logistic-system
  labels:
    app: planner-api
    component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: planner-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: planner-api
        component: backend
    spec:
      containers:
      - name: planner-api
        image: logistic-planner-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: NODE_ENV
        - name: PORT
          value: "3000"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_PORT
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_PASSWORD
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_NAME
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: REDIS_PORT
        - name: RABBITMQ_HOST
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: RABBITMQ_HOST
        - name: RABBITMQ_PORT
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: RABBITMQ_PORT
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: 512Mi
            cpu: 500m
          limits:
            memory: 1Gi
            cpu: 1000m

---
# Planner API Service
apiVersion: v1
kind: Service
metadata:
  name: planner-api-service
  namespace: logistic-system
  labels:
    app: planner-api
    component: backend
spec:
  selector:
    app: planner-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
      name: http
  type: ClusterIP

---
# Tracking Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tracking-service
  namespace: logistic-system
  labels:
    app: tracking-service
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tracking-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: tracking-service
        component: backend
    spec:
      containers:
      - name: tracking-service
        image: logistic-tracking-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8002
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: NODE_ENV
        - name: PORT
          value: "8002"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_PORT
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_PASSWORD
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: DB_NAME
        - name: RABBITMQ_HOST
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: RABBITMQ_HOST
        - name: RABBITMQ_PORT
          valueFrom:
            configMapKeyRef:
              name: logistic-config
              key: RABBITMQ_PORT
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: 512Mi
            cpu: 500m
          limits:
            memory: 1Gi
            cpu: 1000m

---
# Tracking Service
apiVersion: v1
kind: Service
metadata:
  name: tracking-service-service
  namespace: logistic-system
  labels:
    app: tracking-service
    component: backend
spec:
  selector:
    app: tracking-service
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8002
      name: http
  type: ClusterIP

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: logistic-ingress
  namespace: logistic-system
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  ingressClassName: nginx
  rules:
  - host: driver-api.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: driver-api-service
            port:
              number: 80
  - host: planner-api.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: planner-api-service
            port:
              number: 80
  - host: tracking-service.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: tracking-service-service
            port:
              number: 80

---
# Horizontal Pod Autoscaler for Driver API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: driver-api-hpa
  namespace: logistic-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: driver-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Horizontal Pod Autoscaler for Planner API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: planner-api-hpa
  namespace: logistic-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: planner-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80 